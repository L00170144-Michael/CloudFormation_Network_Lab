AWSTemplateFormatVersion: "2010-09-09"

#Update Later
Description: The CloudFormation Network Lab

Parameters:
  VPCCIDR:
    Description: VPC CIDR.
    Type: String
    Default: 10.0.0.0/16

  publicSubnetOneCIDR:
    Description: Public subnet CIDR.
    Type: String
    Default: 10.0.0.0/24

  privateSubnetOneCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.1.0/24

  publicSubnetTwoCIDR:
    Description: Public subnet CIDR.
    Type: String
    Default: 10.0.2.0/24

  privateSubnetTwoCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.3.0/24

Resources:
#VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC

#SUBNETS
  myPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: publicSubnetOneCIDR
      AvailabilityZone: "us-west-2a"
      Tags:
        - Key: Name
          Value: myPublicSubnetOne

  myPrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: privateSubnetOneCIDR
      AvailabilityZone: "us-west-2a"
      Tags:
        - Key: Name
          Value: myPrivateSubnetOne

  myPublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: publicSubnetTwoCIDR
      AvailabilityZone: "us-west-2b"
      Tags:
        - Key: Name
          Value: myPublicSubnetTwo

  myPrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: privateSubnetTwoCIDR
      AvailabilityZone: "us-west-2b"
      Tags:
      - Key: Name
        Value: myPrivateSubnetTwo

#INTERNETGATEWAY
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MyInternetGateway

  AttachMyInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

#ROUTETABLE
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC

#PUBLICROUTETABLE
  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachMyInternetGateway
    Properties:
       RouteTableId:
        Ref: myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
        Ref: myInternetGateway

  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPublicSubnetOne
      RouteTableId:
        Ref: myRouteTable

  newKeyPair:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: myKeyPair

#----------------------------------#


#NatGateway

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref myPublicSubnetOne
        Tags:
        - Key: stack
          Value: production
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: myVPC
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref myPrivateRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
  
  



#PrivateROUTETABLE
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPrivateSubnetOne
      RouteTableId:
        Ref: myPrivateRouteTable

  myPrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPrivateSubnetTwo
      RouteTableId:
        Ref: myPrivateRouteTable
    

#INSTANCE
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-08d70e59c07c61a3a 
      InstanceType: t2.micro
      KeyName: myKeyPair
      SubnetId:
        Ref: myPublicSubnetOne
      SecurityGroupIds:
        - Ref: mySecurityGroup

  myEIP:
    Type: AWS::EC2::EIP  # Allocate an Elastic IP address
    Properties:
      InstanceId: 
        Ref: myEC2Instance

#SECURITYGROUP
  mySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to test ping
      VpcId: 
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

#Create VPC
#Add Subnets
#Add availability Zones
#Add an internet Gateway to the VPC
#Router tables for public and private
#Declare deicated route table for the VPC

#Instance
#SecurityGroup


