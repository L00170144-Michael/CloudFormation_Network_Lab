AWSTemplateFormatVersion: "2010-09-09"

#Update Later
Description: The CloudFormation Network Lab
#----------------------------------------------------
#Group the parameters together
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VPCCIDR
      -
        Label:
          default: "Subnet CIDR"
        Parameters:
          - publicSubnetOneCIDR
          - privateSubnetOneCIDR
          - publicSubnetTwoCIDR
          - privateSubnetTwoCIDR
      -
        Label:
          default: "KEY PAIR"
        Parameters:
          - myKeyPair

Parameters:
  VPCCIDR:
    Description: VPC CIDR.
    Type: String
    Default: 10.0.0.0/16

  publicSubnetOneCIDR:
    Description: Public subnet CIDR.
    Type: String
    Default: 10.0.0.0/24

  privateSubnetOneCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.1.0/24

  publicSubnetTwoCIDR:
    Description: Public subnet CIDR.
    Type: String
    Default: 10.0.2.0/24

  privateSubnetTwoCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.3.0/24
  
  myKeyPair:
    Description: Please select a Key Pair.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: You must select a Key Pair.
#----------------------------------------------------
Resources:
#VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC
#----------------------------------------------------
#SUBNETS
  myPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: publicSubnetOneCIDR
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myPublicSubnetOne

  myPrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: privateSubnetOneCIDR
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myPrivateSubnetOne

  myPublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: publicSubnetTwoCIDR
      AvailabilityZone: !Select [1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myPublicSubnetTwo

  myPrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 
        Ref: privateSubnetTwoCIDR
      AvailabilityZone: !Select [1, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: myPrivateSubnetTwo
#----------------------------------------------------
#INTERNETGATEWAY
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MyInternetGateway

  AttachMyInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
#----------------------------------------------------
#ROUTETABLE
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC

#PUBLICROUTETABLE
  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachMyInternetGateway
    Properties:
       RouteTableId:
        Ref: myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
        Ref: myInternetGateway

  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPublicSubnetOne
      RouteTableId:
        Ref: myRouteTable
#----------------------------------------------------

#----------------------------------------------------
#NatGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref myPublicSubnetOne
        Tags:
        - Key: stack
          Value: production
  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: myVPC
  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref myPrivateRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
#----------------------------------------------------
#PrivateROUTETABLE
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: myVPC

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPrivateSubnetOne
      RouteTableId:
        Ref: myPrivateRouteTable

  myPrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPrivateSubnetTwo
      RouteTableId:
        Ref: myPrivateRouteTable  
#----------------------------------------------------
#INSTANCE
  myEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d5eff06f840b45e9  
      InstanceType: t2.micro
      KeyName:
        Ref: myKeyPair
      SubnetId:
        Ref: myPublicSubnetOne
      SecurityGroupIds:
        - Ref: mySecurityGroup

  myEIP:
    Type: AWS::EC2::EIP  # Allocate an Elastic IP address
    Properties:
      InstanceId: 
        Ref: myEC2Instance
#----------------------------------------------------
#SECURITYGROUP
  mySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to test ping
      VpcId: 
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

#----------------------------------------------------
  myEC2PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0d5eff06f840b45e9  
      InstanceType: t2.micro
      KeyName: 
        Ref: myKeyPair
      SubnetId:
        Ref: myPrivateSubnetOne
      SecurityGroupIds:
        - Ref: myPrivateSecurityGroup

  myPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to test ping
      VpcId: 
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref publicSubnetOneCIDR

#DBSecurity Group
  databaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref mySecurityGroup
      VpcId: !Ref myVPC


Outputs:
  myVPC:
    Description: VPC ID
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-myVPC" 

  myPublicSubnetOne:
    Description: Private Subnet Two ID
    Value: !Ref myPublicSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-myPublicSubnetOne"

  myPublicSubnetTwo:
    Description: Private Subnet Two ID
    Value: !Ref myPublicSubnetTwo
    Export:
      Name: !Sub "${AWS::StackName}-myPublicSubnetTwo"
    
  myPrivateSubnetOne:
    Description: Private Subnet Two ID
    Value: !Ref myPrivateSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-myPrivateSubnetOne"

  myPrivateSubnetTwo:
    Description: Private Subnet Two ID
    Value: !Ref myPrivateSubnetTwo
    Export:
      Name: !Sub "${AWS::StackName}-myPrivateSubnetTwo"

  databaseSecurityGroup:
    Description: database Security GroupID
    Value: !Ref databaseSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-databaseSecurityGroup"

  
  