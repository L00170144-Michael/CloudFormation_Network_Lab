AWSTemplateFormatVersion: "2010-09-09"


Description: The CloudFormation mini Network Lab
#----------------------------------------------------
#Group the parameters together
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPC CIDR"
        Parameters:
          - VPCCIDR
      -
        Label:
          default: "Subnet CIDR"
        Parameters:
          - publicSubnetOneCIDR
          - privateSubnetOneCIDR
          - publicSubnetTwoCIDR
          - privateSubnetTwoCIDR

Parameters:
  VPCCIDR:
    Description: VPC CIDR.
    Type: String
    Default: 10.0.0.0/16

  publicSubnetOneCIDR:
    Description: Public subnet CIDR.
    Type: String
    Default: 10.0.0.0/28

  privateSubnetOneCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.1.0/28

  publicSubnetTwoCIDR:
    Description: Public subnet CIDR.
    Type: String
    Default: 10.0.2.0/28

  privateSubnetTwoCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.3.0/28

  myRDBSubnetCIDR:
    Description: Private subnet CIDR.
    Type: String
    Default: 10.0.4.0/28

#----------------------------------------------------
Resources:
#VPC
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: myVPC
#----------------------------------------------------
#SUBNETS
  myPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref publicSubnetOneCIDR
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myPublicSubnetOne

  myPrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref privateSubnetOneCIDR
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myPrivateSubnetOne

  myPrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref privateSubnetTwoCIDR
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
      - Key: Name
        Value: myPrivateSubnetTwo

  myPrivateSubnetThree:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref publicSubnetTwoCIDR
      AvailabilityZone: !Select [0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myPrivateSubnetThree

#Subnet for RDB as Two AZ are need to use an RDB, this will be 
#An empty AZ used for the RDB
  myRDBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: !Ref myRDBSubnetCIDR
      AvailabilityZone: !Select [1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: myRDBSubnet
#----------------------------------------------------
#INTERNETGATEWAY
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: MyInternetGateway

  attachMyInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref myInternetGateway

#----------------------------------------------------
#ROUTETABLE
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC

#PUBLICROUTETABLE
  myPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: attachMyInternetGateway
    Properties:
      RouteTableId: !Ref myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  myPublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPublicSubnetOne
      RouteTableId: !Ref myRouteTable

#----------------------------------------------------
#NatGateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt NATGatewayEIP.AllocationId
        SubnetId: !Ref myPublicSubnetOne

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
        Domain: myVPC

  RouteNATGateway:
    DependsOn: NATGateway
    Type: AWS::EC2::Route
    Properties:
        RouteTableId: !Ref myPrivateRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        NatGatewayId: !Ref NATGateway
#----------------------------------------------------
#PrivateROUTETABLE
  myPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC

  myPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnetOne
      RouteTableId: !Ref myPrivateRouteTable

  myPrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnetTwo
      RouteTableId: !Ref myPrivateRouteTable 

  myPrivateSubnetThreeRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref myPrivateSubnetThree
      RouteTableId: !Ref myPrivateRouteTable 
#----------------------------------------------------

Outputs:

  myVPC:
    Description: VPC ID
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-myVPC" 

  myPublicSubnetOne:
    Description: Private Subnet Two ID
    Value: !Ref myPublicSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-myPublicSubnetOne"
    
  myPrivateSubnetOne:
    Description: Private Subnet Two ID
    Value: !Ref myPrivateSubnetOne
    Export:
      Name: !Sub "${AWS::StackName}-myPrivateSubnetOne"

  myPrivateSubnetTwo:
    Description: Private Subnet Two ID
    Value: !Ref myPrivateSubnetTwo
    Export:
      Name: !Sub "${AWS::StackName}-myPrivateSubnetTwo"

  myPrivateSubnetThree:
    Description: Private Subnet Two ID
    Value: !Ref myPrivateSubnetThree
    Export:
      Name: !Sub "${AWS::StackName}-myPrivateSubnetThree"

  myRDBSubnet:
    Description: Subnet in a different AZ as need to use RDB.
    Value: !Ref myRDBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-myRDBSubnet"

  StackName:
    Description: Name of the Stack
    Value: !Sub "${AWS::StackName}"
    Export: 
      Name: !Sub "${AWS::StackName}"



  
  